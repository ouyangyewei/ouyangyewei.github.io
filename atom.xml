<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maxwell</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ouyangyewei.github.io/"/>
  <updated>2017-09-25T13:26:33.000Z</updated>
  <id>http://ouyangyewei.github.io/</id>
  
  <author>
    <name>ouyangyewei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Class文件浅析</title>
    <link href="http://ouyangyewei.github.io/2017/04/03/java-classfile/"/>
    <id>http://ouyangyewei.github.io/2017/04/03/java-classfile/</id>
    <published>2017-04-02T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此文仅作为学习笔记，本篇文章只记录Java的Class文件的部分信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TBase</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f0</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Turtle</span> <span class="keyword">extends</span> <span class="title">TBase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> t1;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> t2;</div><div class="line"></div><div class="line">    <span class="comment">// 常量，放入常量池中</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> t3 = <span class="number">65535</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> newArg = arg2;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f3</span><span class="params">(<span class="keyword">long</span> arg3)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> newArg = arg3;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 编译期优化，</span></div><div class="line">        <span class="comment">// 直接将"a","b","c"作为字符串常量，</span></div><div class="line">        <span class="comment">// 放入常量池中</span></div><div class="line">        String a = <span class="string">"a"</span>;</div><div class="line">        String b = <span class="string">"b"</span>;</div><div class="line">        String c = <span class="string">"c"</span>;</div><div class="line">        String d = a + b + c;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p>1.编译生成详细信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">javac -g Turtle.java      编译，生成详细信息</div><div class="line">javap -v Turtle.class     反编译，查看详细信息</div></pre></td></tr></table></figure></p><p>2.linux下查看二进制文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexdump -C Turtle.class   显示十六进制码和ASCII码对照表</div></pre></td></tr></table></figure></p><hr><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p>javap命令计算出来的常量池，参见<a href="#class文件中的常量池">class文件中的常量池</a>，其中重点关注这几个常量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Constant pool:</div><div class="line">  #2 = String             #39            // a</div><div class="line">  #3 = String             #41            // b</div><div class="line">  #4 = String             #42            // c</div><div class="line">  #17 = Integer           65535</div><div class="line">  #39 = Utf8              a</div><div class="line">  #41 = Utf8              b</div><div class="line">  #42 = Utf8              c</div></pre></td></tr></table></figure></p><p>1.使用final声明的常量，将放入到常量池中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> t3 = <span class="number">65535</span>; <span class="comment">// 常量，放入常量池中</span></div></pre></td></tr></table></figure></p><p>2.在编译期间优化，直接将 <strong><em>a</em></strong>、<strong><em>b</em></strong>、<strong><em>c</em></strong> 作为字符串常量，放入到常量池中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String a = <span class="string">"a"</span>;   <span class="comment">// 编译期优化，直接将a作为字符串常量，放入常量池中</span></div><div class="line">String b = <span class="string">"b"</span>;</div><div class="line">String c = <span class="string">"c"</span>;</div></pre></td></tr></table></figure></p><hr><h3 id="类索引、父类索引与接口索引集合"><a href="#类索引、父类索引与接口索引集合" class="headerlink" title="类索引、父类索引与接口索引集合"></a>类索引、父类索引与接口索引集合</h3><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-classfile/img_001.png" alt="img_001"><br>从偏移地址0x00000206开始的3个值分别是0x000A，0x000B，0x0000，也就是：<br>类索引=10<br>父类索引=11，<br>接口索引集合大小=0<br>对应javap命令计算出来的常量池，找到对应的类和父类的常量，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#10 = Class              #52            // Turtle</div><div class="line">#11 = Class              #53            // TBase</div><div class="line">#52 = Utf8               Turtle</div><div class="line">#53 = Utf8               TBase</div></pre></td></tr></table></figure></p><hr><h3 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h3><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-classfile/img_002.png" alt="img_002"><br>从偏移地址0x00000206开始，第一个值是字段数=0x0003，即有三个成员变量，然后依次：<br>t1: <code>00 02 00 0C 00 0D 00 00</code><br>t2: <code>00 0a 00 0e 00 0d 00 00</code><br>t3: <code>00 19 00 0f 00 0d 00 01 00 10 00 00 00 02 00 11</code></p><p>以t2举例解释<br><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-classfile/img_003.png" alt="img_003"></p><hr><h3 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h3><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-classfile/img_004.png" alt="img_004"><br>从偏移地址0x0000022E开始，第一个值是字段数=0x0006，即有6个方法，参见字节码可见具体的6个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.8</span>.0_111</div><div class="line">Compiled from <span class="string">"Turtle.java"</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Turtle</span> <span class="keyword">extends</span> <span class="title">TBase</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> t3;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Turtle</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f3</span><span class="params">(<span class="keyword">long</span>)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f0</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>以f2方法举例解释<br><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-classfile/img_005.png" alt="img_005"><br>访问标记=0x0001，表示<strong><em>ACC_PUBLIC</em></strong>，方法是<strong><em>public</em></strong>的；<br>方法名称索引=0x001b=27，对应常量表中的<strong><em>f2</em></strong>；<br>描述符索引=0x001c=28，对应常量表中的<strong><em>(I)V</em></strong>；<br>属性计数器=0x0001=1，表示此方法的属性表集合有一项属性；<br>属性名称索引=0x0014=20，对应常量表中的<strong><em>Code</em></strong>，说明此属性是方法的字节码描述;<br>(关于Code属性，建议看 <strong>《深入理解Java虚拟机（第2版）》的”§ 6.3.7 属性表集合”</strong> )</p><hr><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="class文件中的常量池"><a href="#class文件中的常量池" class="headerlink" title="class文件中的常量池"></a>class文件中的常量池</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">Constant pool:</div><div class="line">   #1 = Methodref          #11.#47        // TBase."&lt;init&gt;":()V</div><div class="line">   #2 = String             #39            // a</div><div class="line">   #3 = String             #41            // b</div><div class="line">   #4 = String             #42            // c</div><div class="line">   #5 = Class              #48            // java/lang/StringBuilder</div><div class="line">   #6 = Methodref          #5.#47         // java/lang/StringBuilder."&lt;init&gt;":()V</div><div class="line">   #7 = Methodref          #5.#49         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">   #8 = Methodref          #5.#50         // java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class="line">   #9 = Methodref          #11.#51        // TBase.f0:()V</div><div class="line">  #10 = Class              #52            // Turtle</div><div class="line">  #11 = Class              #53            // TBase</div><div class="line">  #12 = Utf8               t1</div><div class="line">  #13 = Utf8               I</div><div class="line">  #14 = Utf8               t2</div><div class="line">  #15 = Utf8               t3</div><div class="line">  #16 = Utf8               ConstantValue</div><div class="line">  #17 = Integer            65535</div><div class="line">  #18 = Utf8               &lt;init&gt;</div><div class="line">  #19 = Utf8               ()V</div><div class="line">  #20 = Utf8               Code</div><div class="line">  #21 = Utf8               LineNumberTable</div><div class="line">  #22 = Utf8               LocalVariableTable</div><div class="line">  #23 = Utf8               this</div><div class="line">  #24 = Utf8               LTurtle;</div><div class="line">  #25 = Utf8               f1</div><div class="line">  #26 = Utf8               i</div><div class="line">  #27 = Utf8               f2</div><div class="line">  #28 = Utf8               (I)V</div><div class="line">  #29 = Utf8               arg2</div><div class="line">  #30 = Utf8               newArg</div><div class="line">  #31 = Utf8               f3</div><div class="line">  #32 = Utf8               (J)V</div><div class="line">  #33 = Utf8               arg3</div><div class="line">  #34 = Utf8               J</div><div class="line">  #35 = Utf8               main</div><div class="line">  #36 = Utf8               ([Ljava/lang/String;)V</div><div class="line">  #37 = Utf8               args</div><div class="line">  #38 = Utf8               [Ljava/lang/String;</div><div class="line">  #39 = Utf8               a</div><div class="line">  #40 = Utf8               Ljava/lang/String;</div><div class="line">  #41 = Utf8               b</div><div class="line">  #42 = Utf8               c</div><div class="line">  #43 = Utf8               d</div><div class="line">  #44 = Utf8               f0</div><div class="line">  #45 = Utf8               SourceFile</div><div class="line">  #46 = Utf8               Turtle.java</div><div class="line">  #47 = NameAndType        #18:#19        // "&lt;init&gt;":()V</div><div class="line">  #48 = Utf8               java/lang/StringBuilder</div><div class="line">  #49 = NameAndType        #54:#55        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">  #50 = NameAndType        #56:#57        // toString:()Ljava/lang/String;</div><div class="line">  #51 = NameAndType        #44:#19        // f0:()V</div><div class="line">  #52 = Utf8               Turtle</div><div class="line">  #53 = Utf8               TBase</div><div class="line">  #54 = Utf8               append</div><div class="line">  #55 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">  #56 = Utf8               toString</div><div class="line">  #57 = Utf8               ()Ljava/lang/String;</div></pre></td></tr></table></figure><h4 id="class文件的十六进制码和ASCII码"><a href="#class文件的十六进制码和ASCII码" class="headerlink" title="class文件的十六进制码和ASCII码"></a>class文件的十六进制码和ASCII码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">00000000  ca fe ba be 00 00 00 34  00 3a 0a 00 0b 00 2f 08  |.......4.:..../.|</div><div class="line">00000010  00 27 08 00 29 08 00 2a  07 00 30 0a 00 05 00 2f  |.&apos;..)..*..0..../|</div><div class="line">00000020  0a 00 05 00 31 0a 00 05  00 32 0a 00 0b 00 33 07  |....1....2....3.|</div><div class="line">00000030  00 34 07 00 35 01 00 02  74 31 01 00 01 49 01 00  |.4..5...t1...I..|</div><div class="line">00000040  02 74 32 01 00 02 74 33  01 00 0d 43 6f 6e 73 74  |.t2...t3...Const|</div><div class="line">00000050  61 6e 74 56 61 6c 75 65  03 00 00 ff ff 01 00 06  |antValue........|</div><div class="line">00000060  3c 69 6e 69 74 3e 01 00  03 28 29 56 01 00 04 43  |&lt;init&gt;...()V...C|</div><div class="line">00000070  6f 64 65 01 00 0f 4c 69  6e 65 4e 75 6d 62 65 72  |ode...LineNumber|</div><div class="line">00000080  54 61 62 6c 65 01 00 12  4c 6f 63 61 6c 56 61 72  |Table...LocalVar|</div><div class="line">00000090  69 61 62 6c 65 54 61 62  6c 65 01 00 04 74 68 69  |iableTable...thi|</div><div class="line">000000a0  73 01 00 08 4c 54 75 72  74 6c 65 3b 01 00 02 66  |s...LTurtle;...f|</div><div class="line">000000b0  31 01 00 01 69 01 00 02  66 32 01 00 04 28 49 29  |1...i...f2...(I)|</div><div class="line">000000c0  56 01 00 04 61 72 67 32  01 00 06 6e 65 77 41 72  |V...arg2...newAr|</div><div class="line">000000d0  67 01 00 02 66 33 01 00  04 28 4a 29 56 01 00 04  |g...f3...(J)V...|</div><div class="line">000000e0  61 72 67 33 01 00 01 4a  01 00 04 6d 61 69 6e 01  |arg3...J...main.|</div><div class="line">000000f0  00 16 28 5b 4c 6a 61 76  61 2f 6c 61 6e 67 2f 53  |..([Ljava/lang/S|</div><div class="line">00000100  74 72 69 6e 67 3b 29 56  01 00 04 61 72 67 73 01  |tring;)V...args.|</div><div class="line">00000110  00 13 5b 4c 6a 61 76 61  2f 6c 61 6e 67 2f 53 74  |..[Ljava/lang/St|</div><div class="line">00000120  72 69 6e 67 3b 01 00 01  61 01 00 12 4c 6a 61 76  |ring;...a...Ljav|</div><div class="line">00000130  61 2f 6c 61 6e 67 2f 53  74 72 69 6e 67 3b 01 00  |a/lang/String;..|</div><div class="line">00000140  01 62 01 00 01 63 01 00  01 64 01 00 02 66 30 01  |.b...c...d...f0.|</div><div class="line">00000150  00 0a 53 6f 75 72 63 65  46 69 6c 65 01 00 0b 54  |..SourceFile...T|</div><div class="line">00000160  75 72 74 6c 65 2e 6a 61  76 61 0c 00 12 00 13 01  |urtle.java......|</div><div class="line">00000170  00 17 6a 61 76 61 2f 6c  61 6e 67 2f 53 74 72 69  |..java/lang/Stri|</div><div class="line">00000180  6e 67 42 75 69 6c 64 65  72 0c 00 36 00 37 0c 00  |ngBuilder..6.7..|</div><div class="line">00000190  38 00 39 0c 00 2c 00 13  01 00 06 54 75 72 74 6c  |8.9..,.....Turtl|</div><div class="line">000001a0  65 01 00 05 54 42 61 73  65 01 00 06 61 70 70 65  |e...TBase...appe|</div><div class="line">000001b0  6e 64 01 00 2d 28 4c 6a  61 76 61 2f 6c 61 6e 67  |nd..-(Ljava/lang|</div><div class="line">000001c0  2f 53 74 72 69 6e 67 3b  29 4c 6a 61 76 61 2f 6c  |/String;)Ljava/l|</div><div class="line">000001d0  61 6e 67 2f 53 74 72 69  6e 67 42 75 69 6c 64 65  |ang/StringBuilde|</div><div class="line">000001e0  72 3b 01 00 08 74 6f 53  74 72 69 6e 67 01 00 14  |r;...toString...|</div><div class="line">000001f0  28 29 4c 6a 61 76 61 2f  6c 61 6e 67 2f 53 74 72  |()Ljava/lang/Str|</div><div class="line">00000200  69 6e 67 3b 00 21 00 0a  00 0b 00 00 00 03 00 02  |ing;.!..........|</div><div class="line">00000210  00 0c 00 0d 00 00 00 0a  00 0e 00 0d 00 00 00 19  |................|</div><div class="line">00000220  00 0f 00 0d 00 01 00 10  00 00 00 02 00 11 00 06  |................|</div><div class="line">00000230  00 01 00 12 00 13 00 01  00 14 00 00 00 2f 00 01  |............./..|</div><div class="line">00000240  00 01 00 00 00 05 2a b7  00 01 b1 00 00 00 02 00  |......*.........|</div><div class="line">00000250  15 00 00 00 06 00 01 00  00 00 09 00 16 00 00 00  |................|</div><div class="line">00000260  0c 00 01 00 00 00 05 00  17 00 18 00 00 00 01 00  |................|</div><div class="line">00000270  19 00 13 00 01 00 14 00  00 00 3b 00 01 00 02 00  |..........;.....|</div><div class="line">00000280  00 00 03 04 3c b1 00 00  00 02 00 15 00 00 00 0a  |....&lt;...........|</div><div class="line">00000290  00 02 00 00 00 0f 00 02  00 10 00 16 00 00 00 16  |................|</div><div class="line">000002a0  00 02 00 00 00 03 00 17  00 18 00 00 00 02 00 01  |................|</div><div class="line">000002b0  00 1a 00 0d 00 01 00 01  00 1b 00 1c 00 01 00 14  |................|</div><div class="line">000002c0  00 00 00 45 00 01 00 03  00 00 00 03 1b 3d b1 00  |...E.........=..|</div><div class="line">000002d0  00 00 02 00 15 00 00 00  0a 00 02 00 00 00 13 00  |................|</div><div class="line">000002e0  02 00 14 00 16 00 00 00  20 00 03 00 00 00 03 00  |........ .......|</div><div class="line">000002f0  17 00 18 00 00 00 00 00  03 00 1d 00 0d 00 01 00  |................|</div><div class="line">00000300  02 00 01 00 1e 00 0d 00  02 00 01 00 1f 00 20 00  |.............. .|</div><div class="line">00000310  01 00 14 00 00 00 45 00  02 00 05 00 00 00 03 1f  |......E.........|</div><div class="line">00000320  42 b1 00 00 00 02 00 15  00 00 00 0a 00 02 00 00  |B...............|</div><div class="line">00000330  00 17 00 02 00 18 00 16  00 00 00 20 00 03 00 00  |........... ....|</div><div class="line">00000340  00 03 00 17 00 18 00 00  00 00 00 03 00 21 00 22  |.............!.&quot;|</div><div class="line">00000350  00 01 00 02 00 01 00 1e  00 22 00 03 00 09 00 23  |.........&quot;.....#|</div><div class="line">00000360  00 24 00 01 00 14 00 00  00 84 00 02 00 05 00 00  |.$..............|</div><div class="line">00000370  00 22 12 02 4c 12 03 4d  12 04 4e bb 00 05 59 b7  |.&quot;..L..M..N...Y.|</div><div class="line">00000380  00 06 2b b6 00 07 2c b6  00 07 2d b6 00 07 b6 00  |..+...,...-.....|</div><div class="line">00000390  08 3a 04 b1 00 00 00 02  00 15 00 00 00 16 00 05  |.:..............|</div><div class="line">000003a0  00 00 00 1b 00 03 00 1c  00 06 00 1d 00 09 00 1e  |................|</div><div class="line">000003b0  00 21 00 1f 00 16 00 00  00 34 00 05 00 00 00 22  |.!.......4.....&quot;|</div><div class="line">000003c0  00 25 00 26 00 00 00 03  00 1f 00 27 00 28 00 01  |.%.&amp;.......&apos;.(..|</div><div class="line">000003d0  00 06 00 1c 00 29 00 28  00 02 00 09 00 19 00 2a  |.....).(.......*|</div><div class="line">000003e0  00 28 00 03 00 21 00 01  00 2b 00 28 00 04 10 41  |.(...!...+.(...A|</div><div class="line">000003f0  00 2c 00 13 00 01 00 14  00 00 00 2f 00 01 00 01  |.,........./....|</div><div class="line">00000400  00 00 00 05 2a b7 00 09  b1 00 00 00 02 00 15 00  |....*...........|</div><div class="line">00000410  00 00 06 00 01 00 00 00  09 00 16 00 00 00 0c 00  |................|</div><div class="line">00000420  01 00 00 00 05 00 17 00  18 00 00 00 01 00 2d 00  |..............-.|</div><div class="line">00000430  00 00 02 00 2e                                    |.....|</div><div class="line">00000435</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此文仅作为学习笔记，本篇文章只记录Java的Class文件的部分信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TBase&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f0&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Turtle&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TBase&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 常量，放入常量池中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t3 = &lt;span class=&quot;number&quot;&gt;65535&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; newArg = arg2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; arg3)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; newArg = arg3;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 编译期优化，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 直接将&quot;a&quot;,&quot;b&quot;,&quot;c&quot;作为字符串常量，&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 放入常量池中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String a = &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String b = &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String c = &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String d = a + b + c;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://ouyangyewei.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ouyangyewei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java StringBuffer</title>
    <link href="http://ouyangyewei.github.io/2017/04/01/java-stringbuffer/"/>
    <id>http://ouyangyewei.github.io/2017/04/01/java-stringbuffer/</id>
    <published>2017-03-31T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>StringBuffer和StringBuilder，两者都是可变对象，都继承java.lang.AbstractStringBuilder类，都实现java.io.Serializable和java.lang.CharSequence接口。<br>最大的区别在于：<b><u>StringBuffer是线程安全的，而StringBuilder是非线程安全的</u></b></p><a id="more"></a><p>下面代码摘自java.lang.StringBuffer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuffer</span></span></div><div class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></div><div class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span></div></pre></td></tr></table></figure></p><p>下面代码摘自java.lang.StringBuilder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span></span></div><div class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></div><div class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span></div></pre></td></tr></table></figure></p><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-stringbuffer-stringbuilder/StringBuffer_StringBuilder_UML.png" alt="java_StringBuffer_StringBuilder"></p><hr><h3 id="AbstractStringBuilder类"><a href="#AbstractStringBuilder类" class="headerlink" title="AbstractStringBuilder类"></a>AbstractStringBuilder类</h3><p>AbstractStringBuilder类封装了StringBuffer和StringBuilder大部分操作的实现。</p><h4 id="字符串的内存形态"><a href="#字符串的内存形态" class="headerlink" title="字符串的内存形态"></a>字符串的内存形态</h4><p>下面代码摘自java.lang.AbstractStringBuilder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * The value is used for character storage.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">char</span>[] value;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * The count is the number of characters used.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">int</span> count;</div></pre></td></tr></table></figure></p><p>StringBuffer和StringBuilder没有具体的成员变量来存储字符串，而是使用继承自AbstractStringBuilder类的成员变量<code>char[] value</code>，因为没有使用final关键字修饰，因此值是可变的。</p><h4 id="字符串构造方法"><a href="#字符串构造方法" class="headerlink" title="字符串构造方法"></a>字符串构造方法</h4><p>下面代码摘自java.lang.StringBuffer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>下面代码摘自java.lang.StringBuilder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>下面代码摘自java.lang.AbstractStringBuilder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</div><div class="line">    value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当创建一个StirngBuffer或StringBuilder对象时，若不指定容量，则默认创建长度为16的char类型数组</p><h4 id="字符串的append操作"><a href="#字符串的append操作" class="headerlink" title="字符串的append操作"></a>字符串的append操作</h4><p>下面代码摘自java.lang.AbstractStringBuilder，以入参为String对象为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> appendNull();</div><div class="line">    <span class="keyword">int</span> len = str.length();</div><div class="line">    <span class="comment">// 检查是否char[]数组是否需要扩容</span></div><div class="line">    ensureCapacityInternal(count + len);</div><div class="line">    str.getChars(<span class="number">0</span>, len, value, count);</div><div class="line">    count += len;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="comment">// value.length默认长度是16</span></div><div class="line">    <span class="comment">// minimumCapacity = str.length + 字符串的实际长度</span></div><div class="line">    <span class="comment">// 若当前字符串数组长度不足最小应分配的长度，则将重新创建一个长度的char[]数组</span></div><div class="line">    <span class="keyword">if</span> (minimumCapacity - value.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        value = Arrays.copyOf(value,</div><div class="line">                newCapacity(minimumCapacity));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-stringbuffer-stringbuilder/StringBuffer.append.png" alt="StringBuffer.append()"></p><h4 id="字符串的insert操作"><a href="#字符串的insert操作" class="headerlink" title="字符串的insert操作"></a>字符串的insert操作</h4><p>下面代码摘自java.lang.AbstractStringBuilder，以入参为String对象为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, String str)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ((offset &lt; <span class="number">0</span>) || (offset &gt; length()))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</div><div class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>)</div><div class="line">        str = <span class="string">"null"</span>;</div><div class="line">    <span class="keyword">int</span> len = str.length();</div><div class="line">    ensureCapacityInternal(count + len);</div><div class="line">    System.arraycopy(value, offset, value, offset + len, count - offset);</div><div class="line">    str.getChars(value, offset);</div><div class="line">    count += len;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-stringbuffer-stringbuilder/StringBuffer.insert.png" alt="StringBuffer.insert"><br>假设执行如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"abghij"</span>);</div><div class="line">sb.insert(<span class="number">2</span>, <span class="string">"cdef"</span>);</div></pre></td></tr></table></figure></p><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-stringbuffer-stringbuilder/StringBuffer.insert_visio.png" alt="StringBuffer.insert.visio"></p><h4 id="字符串的delete操作"><a href="#字符串的delete操作" class="headerlink" title="字符串的delete操作"></a>字符串的delete操作</h4><p>下面代码摘自java.lang.AbstractStringBuilder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(start);</div><div class="line">    <span class="keyword">if</span> (end &gt; count)</div><div class="line">        end = count;</div><div class="line">    <span class="keyword">if</span> (start &gt; end)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException();</div><div class="line">    <span class="keyword">int</span> len = end - start;</div><div class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</div><div class="line">        System.arraycopy(value, start+len, value, start, count-end);</div><div class="line">        count -= len;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>实际上的操作是字符串数组拷贝，假设执行如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"abcdefghij"</span>);</div><div class="line">sb.delete(<span class="number">2</span>, <span class="number">6</span>);</div></pre></td></tr></table></figure></p><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-stringbuffer-stringbuilder/StringBuffer.delete.png" alt="StringBuffer.delete"></p><hr><h3 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h3><h4 id="为什么是线程安全的"><a href="#为什么是线程安全的" class="headerlink" title="为什么是线程安全的"></a>为什么是线程安全的</h4><p>线程安全是指多线程操作同一个对象，不会出现同步等问题。StringBuffer类中，使用了大量的synchronized关键字来修饰方法。<br>摘取java.lang.StringBuffer部分使用synchronized关键字修饰的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> value.length;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.ensureCapacity(minimumCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h4><p>摘自<a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3.1.3" target="_blank" rel="external">Java Language Specification, Java SE 7 Edition, Section 8.3.1.3. transient Fields</a></p><blockquote><p>Variables may be marked transient to indicate that they are not part of the persistent state of an object.</p></blockquote><p>在Java中，transient关键字用来指出哪些成员变量不应该被序列化。值得注意的是：</p><ul><li>序列化针对的是对象，而不是类；</li><li>static修饰的变量，本身是隐式的transient，同时静态变量是属于类层次，不能被序列化；</li><li>transient只能用于修饰成员变量，不能修饰本地变量，不能修饰方法和类。</li></ul><p>StringBuffer类中，有一个成员变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * A cache of the last value returned by toString. Cleared</span></div><div class="line"><span class="comment"> * whenever the StringBuffer is modified.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">char</span>[] toStringCache;</div></pre></td></tr></table></figure></p><p>toStringCache这个成员变量，从命名上看，猜测是为了用于toString()方法而做的字符串缓冲。可见，如果是为了做缓冲，确实没必要在StringBuffer对象中持久化。</p><h4 id="toString的操作"><a href="#toString的操作" class="headerlink" title="toString的操作"></a>toString的操作</h4><p>下面代码摘自java.lang.StringBuffer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (toStringCache == <span class="keyword">null</span>) &#123;</div><div class="line">        toStringCache = Arrays.copyOfRange(value, <span class="number">0</span>, count);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(toStringCache, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>toStringCache获得实际长度的字符串数组，并创建一个String对象</p><hr><h3 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h3><p><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html" target="_blank" rel="external">Java SE java.lang.StringBuffer</a><br><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html" target="_blank" rel="external">Java SE java.lang.StringBuilder</a><br><a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3.1.3" target="_blank" rel="external">Java transient关键字</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;StringBuffer和StringBuilder，两者都是可变对象，都继承java.lang.AbstractStringBuilder类，都实现java.io.Serializable和java.lang.CharSequence接口。&lt;br&gt;最大的区别在于：&lt;b&gt;&lt;u&gt;StringBuffer是线程安全的，而StringBuilder是非线程安全的&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://ouyangyewei.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ouyangyewei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java String</title>
    <link href="http://ouyangyewei.github.io/2017/04/01/java-string/"/>
    <id>http://ouyangyewei.github.io/2017/04/01/java-string/</id>
    <published>2017-03-31T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><h4 id="String类是不可变类"><a href="#String类是不可变类" class="headerlink" title="String类是不可变类"></a>String类是不可变类</h4><p>下面代码片段摘自java.lang.String<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></div><div class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</div><div class="line">    <span class="comment">/** The value is used for character storage. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</div><div class="line"></div><div class="line">    <span class="comment">/** Cache the hash code for the string */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></div></pre></td></tr></table></figure></p><p>可见，String类使用final关键字修饰，是不可变类，因此不可被继承；</p><a id="more"></a><h4 id="字符串的内存形态"><a href="#字符串的内存形态" class="headerlink" title="字符串的内存形态"></a>字符串的内存形态</h4><p>String对象在内存中使用不可变的char型数组来存放字符串，因此String对象在创建后，其值就不可被改变（对于修改已存在的String对象的值，实际上是会创建一个新的String对象，可参考java.lang.String.concat方法的实现）</p><p>下面代码摘自java.lang.String<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> otherLen = str.length();</div><div class="line">    <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> len = value.length;</div><div class="line">    <span class="keyword">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</div><div class="line">    str.getChars(buf, len);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>下面代码摘自java.util.Arrays<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] copyOf(<span class="keyword">char</span>[] original, <span class="keyword">int</span> newLength) &#123;</div><div class="line">    <span class="keyword">char</span>[] copy = <span class="keyword">new</span> <span class="keyword">char</span>[newLength];</div><div class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</div><div class="line">                     Math.min(original.length, newLength));</div><div class="line">    <span class="keyword">return</span> copy;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-string/java.lang.String.concat.png" alt="java.lang.String.concat"></p><h4 id="String中的”-”操作符"><a href="#String中的”-”操作符" class="headerlink" title="String中的”+”操作符"></a>String中的”+”操作符</h4><p>引用String类的注释</p><blockquote><p>The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. String concatenation is implemented through the StringBuilder(or StringBuffer) class and its append method. String conversions are implemented through the method toString, defined by Object and inherited by all classes in Java. For additional information on string concatenation and conversion, see Gosling, Joy, and Steele, The Java Language Specification.</p></blockquote><p>Java中，String的”+”操作符，是通过StringBuilder（或StringBuffer）类和它的append方法实现的，下面以一段代码来证明：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Turtle</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String a = <span class="string">"a"</span>;</div><div class="line">        String b = <span class="string">"b"</span>;</div><div class="line">        String c = <span class="string">"c"</span>;</div><div class="line">        String d = a + b + c;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对应的字节码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</div><div class="line">  descriptor: ([Ljava/lang/String;)V</div><div class="line">  flags: ACC_PUBLIC, ACC_STATIC</div><div class="line">  Code:</div><div class="line">    stack=<span class="number">2</span>, locals=<span class="number">5</span>, args_size=<span class="number">1</span></div><div class="line">       0: ldc           #2  // String a</div><div class="line">       <span class="number">2</span>: astore_1</div><div class="line">       3: ldc           #3  // String b</div><div class="line">       <span class="number">5</span>: astore_2</div><div class="line">       6: ldc           #4  // String c</div><div class="line">       <span class="number">8</span>: astore_3</div><div class="line">       9: new           #5  // class java/lang/StringBuilder</div><div class="line">      <span class="number">12</span>: dup</div><div class="line">      13: invokespecial #6  // Method java/lang/StringBuilder."&lt;init&gt;":()V</div><div class="line">      <span class="number">16</span>: aload_1</div><div class="line">      17: invokevirtual #7  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      <span class="number">20</span>: aload_2</div><div class="line">      21: invokevirtual #7  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      <span class="number">24</span>: aload_3</div><div class="line">      25: invokevirtual #7  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      28: invokevirtual #8  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class="line">      <span class="number">31</span>: astore        <span class="number">4</span></div><div class="line">      <span class="number">33</span>: <span class="keyword">return</span></div><div class="line">    LocalVariableTable:</div><div class="line">      Start  Length  Slot  Name   Signature</div><div class="line">          <span class="number">0</span>      <span class="number">34</span>     <span class="number">0</span>  args   [Ljava/lang/String;</div><div class="line">          <span class="number">3</span>      <span class="number">31</span>     <span class="number">1</span>     a   Ljava/lang/String;</div><div class="line">          <span class="number">6</span>      <span class="number">28</span>     <span class="number">2</span>     b   Ljava/lang/String;</div><div class="line">          <span class="number">9</span>      <span class="number">25</span>     <span class="number">3</span>     c   Ljava/lang/String;</div><div class="line">         <span class="number">33</span>       <span class="number">1</span>     <span class="number">4</span>     d   Ljava/lang/String;</div></pre></td></tr></table></figure></p><p>可见，”+”的操作，实际上会创建一个StringBuilder对象，先后调用append()方法，添加字符串”a”，”b”，”c”，最后调用toString()方法返回一个String对象</p><hr><h3 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h3><p><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html" target="_blank" rel="external">Java SE java.lang.String</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;String类&quot;&gt;&lt;a href=&quot;#String类&quot; class=&quot;headerlink&quot; title=&quot;String类&quot;&gt;&lt;/a&gt;String类&lt;/h3&gt;&lt;h4 id=&quot;String类是不可变类&quot;&gt;&lt;a href=&quot;#String类是不可变类&quot; class=&quot;headerlink&quot; title=&quot;String类是不可变类&quot;&gt;&lt;/a&gt;String类是不可变类&lt;/h4&gt;&lt;p&gt;下面代码片段摘自java.lang.String&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;java&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Comparable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;CharSequence&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** The value is used for character storage. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; value[];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** Cache the hash code for the string */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hash; &lt;span class=&quot;comment&quot;&gt;// Default to 0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见，String类使用final关键字修饰，是不可变类，因此不可被继承；&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://ouyangyewei.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ouyangyewei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 值传递与引用传递</title>
    <link href="http://ouyangyewei.github.io/2017/03/13/java-pass-by-value-and-pass-by-reference/"/>
    <id>http://ouyangyewei.github.io/2017/03/13/java-pass-by-value-and-pass-by-reference/</id>
    <published>2017-03-12T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Java在传递参数时，是通过值传递，而不是通过引用传递的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func_1</span><span class="params">(Dog a)</span> </span>&#123;</div><div class="line">        Dog b = <span class="keyword">new</span> Dog(<span class="string">"dog_b"</span>);</div><div class="line">        a = b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func_2</span><span class="params">(Dog a)</span> </span>&#123;</div><div class="line">        a.setName(<span class="string">"dog_a"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Dog dog = <span class="keyword">new</span> Dog(<span class="string">"dog"</span>);</div><div class="line">        func_1(dog);</div><div class="line">        func_2(dog);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中类Dog如下：<br><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-pass-by-value-and-pass-by-reference/img_001.png" alt="img_001"></p><a id="more"></a><hr><p>下面我将通过结合代码与字节码来一步一步解释：</p><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">33</span>  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="number">34</span>      Dog dog = <span class="keyword">new</span> Dog(<span class="string">"dog"</span>);</div><div class="line"><span class="number">35</span>      func_1(dog);</div><div class="line"><span class="number">36</span>      func_2(dog);</div><div class="line"><span class="number">37</span>  &#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public static void main(java.lang.String[]);</div><div class="line">  descriptor: ([Ljava/lang/String;)V</div><div class="line">  flags: ACC_PUBLIC, ACC_STATIC</div><div class="line">  Code:</div><div class="line">    stack=3, locals=2, args_size=1</div><div class="line">       0: new           #2   // 创建com/baidu/stack/Dog对象，并将引用压入操作栈</div><div class="line">       3: dup                // 复制栈顶引用并将复制值压入操作栈</div><div class="line">       4: ldc           #7   // 将字符串&quot;dog&quot;从常量池推送至操作数栈</div><div class="line">       6: invokespecial #4   // 调用com/baidu/stack/Dog类的带参构造函数，初始化对象</div><div class="line">       9: astore_1           // 将操作栈顶的对象引用存储到局部变量表slot 1（即dog）中</div><div class="line">      10: aload_1            // 将局部变量中的对象引用dog加载到操作栈顶</div><div class="line">      11: invokestatic  #8   // 调用方法func_1</div><div class="line">      14: aload_1            // 将局部变量中的对象引用dog加载到操作栈顶</div><div class="line">      15: invokestatic  #9   // 调用方法func_2</div><div class="line">      18: return</div><div class="line">    LineNumberTable:</div><div class="line">      line 34: 0</div><div class="line">      line 35: 10</div><div class="line">      line 36: 14</div><div class="line">      line 37: 18</div><div class="line">    LocalVariableTable:</div><div class="line">      Start  Length  Slot  Name   Signature</div><div class="line">          0      19     0  args   [Ljava/lang/String;</div><div class="line">         10       9     1   dog   Lcom/baidu/stack/Dog;</div></pre></td></tr></table></figure><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-pass-by-value-and-pass-by-reference/img_002.png" alt="img_002"></p><h3 id="调用func-1函数"><a href="#调用func-1函数" class="headerlink" title="调用func_1函数"></a>调用func_1函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">24</span>  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func_1</span><span class="params">(Dog a)</span> </span>&#123;</div><div class="line"><span class="number">25</span>      Dog b = <span class="keyword">new</span> Dog(<span class="string">"dog_b"</span>);</div><div class="line"><span class="number">26</span>      a = b;</div><div class="line"><span class="number">27</span>  &#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public static void func_1(com.baidu.stack.Dog);</div><div class="line">  descriptor: (Lcom/baidu/stack/Dog;)V</div><div class="line">  flags: ACC_PUBLIC, ACC_STATIC</div><div class="line">  Code:</div><div class="line">    stack=3, locals=2, args_size=1</div><div class="line">       0: new           #2   // 创建com/baidu/stack/Dog对象，并将引用压入操作栈</div><div class="line">       3: dup                // 复制栈顶引用并将复制值压入操作栈</div><div class="line">       4: ldc           #3   // 将字符串&quot;dog_b&quot;从常量池推送至操作数栈</div><div class="line">       6: invokespecial #4   // 调用com/baidu/stack/Dog类的带参构造函数，初始化对象</div><div class="line">       9: astore_1           // 将操作栈顶的对象引用存储到局部变量表slot 1（即b）中</div><div class="line">      10: aload_1            // 将局部变量表中的slot 1的引用值（即b）加载到操作栈顶</div><div class="line">      11: astore_0           // 将操作栈顶的对象引用存储到局部变量表slot 0（即a）中，即a=b</div><div class="line">      12: return</div><div class="line">    LineNumberTable:</div><div class="line">      line 25: 0</div><div class="line">      line 26: 10</div><div class="line">      line 27: 12</div><div class="line">    LocalVariableTable:</div><div class="line">      Start  Length  Slot  Name   Signature</div><div class="line">          0      13     0     a   Lcom/baidu/stack/Dog;</div><div class="line">         10       3     1     b   Lcom/baidu/stack/Dog;</div></pre></td></tr></table></figure><p>从上面的字节码中，可以看到：</p><ul><li>在定义方法时，引用a被声明和初始化为null<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func_1</span><span class="params">(Dog a)</span></span></div></pre></td></tr></table></figure></li></ul><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-pass-by-value-and-pass-by-reference/img_003.png" alt="img_003"></p><ul><li>在调用方法时，引用a将指向引用dog指向的对象<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func_1(dog);</div></pre></td></tr></table></figure></li></ul><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-pass-by-value-and-pass-by-reference/img_004.png" alt="img_004"></p><ul><li>在声明引用b时，创建了一个新的Dog类型对象，引用b并指向新创建的对象<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Dog b = <span class="keyword">new</span> Dog(<span class="string">"dog_b"</span>);</div></pre></td></tr></table></figure></li></ul><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-pass-by-value-and-pass-by-reference/img_005.png" alt="img_005"></p><ul><li>a=b，重新将a的引用指向引用b指向的对象<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a = b;</div></pre></td></tr></table></figure></li></ul><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-pass-by-value-and-pass-by-reference/img_006.png" alt="img_006"></p><hr><h3 id="调用func-2函数"><a href="#调用func-2函数" class="headerlink" title="调用func_2函数"></a>调用func_2函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">29</span>  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func_2</span><span class="params">(Dog a)</span> </span>&#123;</div><div class="line"><span class="number">30</span>      a.setName(<span class="string">"dog_a"</span>);</div><div class="line"><span class="number">31</span>  &#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public static void func_2(com.baidu.stack.Dog);</div><div class="line">  descriptor: (Lcom/baidu/stack/Dog;)V</div><div class="line">  flags: ACC_PUBLIC, ACC_STATIC</div><div class="line">  Code:</div><div class="line">    stack=2, locals=1, args_size=1</div><div class="line">       0: aload_0            // 将局部变量表中的slot 0的引用值（即a）加载到操作栈顶</div><div class="line">       1: ldc           #5   // 将字符串&quot;dog_a&quot;从常量池推送至操作数栈</div><div class="line">       3: invokevirtual #6   // 调用方法com/baidu/stack/Dog.setName</div><div class="line">       6: return</div><div class="line">    LineNumberTable:</div><div class="line">      line 30: 0</div><div class="line">      line 31: 6</div><div class="line">    LocalVariableTable:</div><div class="line">      Start  Length  Slot  Name   Signature</div><div class="line">          0       7     0     a   Lcom/baidu/stack/Dog;</div></pre></td></tr></table></figure><p>从上面的字节码中，可以看到：</p><ul><li>在调用方法时，引用a将指向dog指向的对象<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func_2(dog);</div></pre></td></tr></table></figure></li></ul><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-pass-by-value-and-pass-by-reference/img_004.png" alt="img_004"></p><ul><li>调用Dog.setName方法，将会改变引用a所指向对象的name<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a.setName(<span class="string">"dog_a"</span>);</div></pre></td></tr></table></figure></li></ul><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/java-pass-by-value-and-pass-by-reference/img_007.png" alt="img_007"></p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value" target="_blank" rel="external">Is-Java-pass-by-reference-or-pass-by-value</a><br><a href="http://javadude.com/articles/passbyvalue.htm" target="_blank" rel="external">Java-is-Pass-by-Value-Dammit</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Java在传递参数时，是通过值传递，而不是通过引用传递的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Demo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func_1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Dog a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Dog b = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dog(&lt;span class=&quot;string&quot;&gt;&quot;dog_b&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a = b;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func_2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Dog a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a.setName(&lt;span class=&quot;string&quot;&gt;&quot;dog_a&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Dog dog = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dog(&lt;span class=&quot;string&quot;&gt;&quot;dog&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        func_1(dog);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        func_2(dog);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中类Dog如下：&lt;br&gt;&lt;img src=&quot;http://ol3q0aw97.bkt.clouddn.com/blog/java-pass-by-value-and-pass-by-reference/img_001.png&quot; alt=&quot;img_001&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://ouyangyewei.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ouyangyewei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 内部类</title>
    <link href="http://ouyangyewei.github.io/2017/02/07/java-inner-class/"/>
    <id>http://ouyangyewei.github.io/2017/02/07/java-inner-class/</id>
    <published>2017-02-06T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>内部类的访问控制符可以使用public、protected、private，而外部类只能使用public和默认</p></blockquote><h3 id="成员内部类与静态内部类"><a href="#成员内部类与静态内部类" class="headerlink" title="成员内部类与静态内部类"></a>成员内部类与静态内部类</h3><p>直接定义在外部类内部（不在方法或代码块内部），它可以直接访问外部类的所有成员变量和方法（包括private）。它可以有各种修饰符，包括：public、protected、private、static、final和abstract，也可以是默认；</p><a id="more"></a><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><p>对象级别（依赖于外部类对象）。如同外部类的一个成员变量，不能声明任何static成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> outerValue = <span class="number">5</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">()</span> </span>&#123; ++<span class="keyword">this</span>.outerValue; &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showOuterValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 成员内部类能直接访问外部类的成员变量和方法</span></div><div class="line">            <span class="comment">// 通过Outer.this（可以省略不写），内部类能获取到外部类的成员变量和方法</span></div><div class="line">            System.out.println(Outer.<span class="keyword">this</span>.outerValue);</div><div class="line">            Outer.<span class="keyword">this</span>.addOne();</div><div class="line">            System.out.println(Outer.<span class="keyword">this</span>.outerValue);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 内部类对象依赖外部类对象，需要先生成外部类对象</span></div><div class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer().new Inner();</div><div class="line">        inner.showOuterValue();</div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">/* Output:</span></div><div class="line"><span class="comment">5</span></div><div class="line"><span class="comment">6</span></div><div class="line"><span class="comment">*/</span><span class="comment">//:~</span></div></pre></td></tr></table></figure></p><p>外部类想要访问内部类的成员变量和方法，需要通过内部类的对象来获取。</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>类级别（不依赖外部类对象）。如同外部类的一个静态成员变量，它的对象与外部类对象间不存在依赖关系。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> outerValue = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> outerStaticValue = <span class="number">2</span>;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Outer.f1"</span>); &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Outer.f2"</span>); &#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showOuterValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// !: 静态内部类不能访问外部类的非静态成员变量和方法</span></div><div class="line">            <span class="comment">// System.out.println(Outer.outerValue);</span></div><div class="line">            <span class="comment">// Outer.f1();</span></div><div class="line"></div><div class="line">            <span class="comment">// 静态内部类只能访问外部类的静态成员变量和方法</span></div><div class="line">            System.out.println(Outer.outerStaticValue);</div><div class="line">            Outer.f2();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 静态内部类对象的创建，不需要依赖外部类的对象，可直接创建</span></div><div class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer.Inner();</div><div class="line">        inner.showOuterValue();</div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">/* Output:</span></div><div class="line"><span class="comment">2</span></div><div class="line"><span class="comment">Outer.f2</span></div><div class="line"><span class="comment">*/</span><span class="comment">//:~</span></div></pre></td></tr></table></figure></p><p>若静态内部类使用private修饰，则只能在外部类中访问</p><hr><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>定义在代码块的类（比如方法和作用域内），它们只在定义它们的代码块中是可见的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String o1 = <span class="string">"o1"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String o2 = <span class="string">"o2"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String o3 = <span class="string">"o3"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> String f1 = <span class="string">"f1"</span>;</div><div class="line">        String f2 = <span class="string">"f2"</span>;</div><div class="line"></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showValue</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(o1);</div><div class="line">                System.out.println(o2);</div><div class="line">                System.out.println(o3);</div><div class="line">                System.out.println(f1);</div><div class="line"></div><div class="line">                <span class="comment">// !: 局部内部类不能访问非final型局部变量</span></div><div class="line">                <span class="comment">// System.out.println(f2);</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Inner().showValue();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Outer().func();</div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">/* Output:</span></div><div class="line"><span class="comment">o1</span></div><div class="line"><span class="comment">o2</span></div><div class="line"><span class="comment">o3</span></div><div class="line"><span class="comment">f1</span></div><div class="line"><span class="comment">*/</span><span class="comment">//:~</span></div></pre></td></tr></table></figure></p><p>局部内部类只在定义的代码块中可见，因此没有public、private、protected和default修饰符，因为没有意义。局部内部类不能被static修饰，因为局部内部类不再是成员的位置，它只在定义的代码块中可见。</p><hr><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类是局部内部类的一种特殊形式，必须继承一个父类或实现一个接口。匿名内部类很重要的一个作用就是缩减代码量。</p><p>不使用匿名内部类来实现抽象方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Cycle</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">ride</span><span class="params">()</span></span>; &#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CycleFactory</span> </span>&#123; <span class="function">Cycle <span class="title">getCycle</span><span class="params">()</span></span>; &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">implements</span> <span class="title">Cycle</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ride</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Bicycle"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unicycle</span> <span class="keyword">implements</span> <span class="title">Cycle</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ride</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Unicycle"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BicycleFactory</span> <span class="keyword">implements</span> <span class="title">CycleFactory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Cycle <span class="title">getCycle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bicycle();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnicycleFactory</span> <span class="keyword">implements</span> <span class="title">CycleFactory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Cycle <span class="title">getCycle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Unicycle();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cycles</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CycleFactory[] cycleFactories = &#123;</div><div class="line">                <span class="keyword">new</span> BicycleFactory(),</div><div class="line">                <span class="keyword">new</span> UnicycleFactory()</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">for</span> (CycleFactory factory : cycleFactories) &#123;</div><div class="line">            factory.getCycle().ride();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可见，每新增一种Cycle工厂，都要先实现CycleFactory接口，然后实现出对象，再向上转型为CycleFactory引用，过程太过繁琐，而且代码量会逐渐膨胀。但是使用匿名内部类的方式就可以很好解决：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Cycle</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">ride</span><span class="params">()</span></span>; &#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CycleFactory</span> </span>&#123; <span class="function">Cycle <span class="title">getCycle</span><span class="params">()</span></span>; &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">implements</span> <span class="title">Cycle</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CycleFactory factory = <span class="keyword">new</span> CycleFactory() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Cycle <span class="title">getCycle</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bicycle();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bicycle</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ride</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Bicycle"</span>); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unicycle</span> <span class="keyword">implements</span> <span class="title">Cycle</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CycleFactory factory = <span class="keyword">new</span> CycleFactory() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Cycle <span class="title">getCycle</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Unicycle();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Unicycle</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ride</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Unicycle"</span>); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cycles</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CycleFactory[] cycleFactories = &#123;</div><div class="line">                Bicycle.factory,</div><div class="line">                Unicycle.factory</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">for</span> (CycleFactory factory : cycleFactories) &#123;</div><div class="line">            factory.getCycle().ride();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可见，匿名内部类实现了CycleFactory接口并在大括号中实现了抽象方法。</p><hr><h3 id="内部类标识符"><a href="#内部类标识符" class="headerlink" title="内部类标识符"></a>内部类标识符</h3><h4 id="非匿名的内部类"><a href="#非匿名的内部类" class="headerlink" title="非匿名的内部类"></a>非匿名的内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer1</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String o1 = <span class="string">"o1"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String o2 = <span class="string">"o2"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String o3 = <span class="string">"o3"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> String f1 = <span class="string">"f1"</span>;</div><div class="line">        String f2 = <span class="string">"f2"</span>;</div><div class="line"></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showValue</span><span class="params">(String f3)</span> </span>&#123;</div><div class="line">                System.out.println(o1);</div><div class="line">                System.out.println(o2);</div><div class="line">                System.out.println(o3);</div><div class="line">                System.out.println(f1);</div><div class="line">                System.out.println(f3);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Inner().showValue(<span class="string">"f3"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ll</div><div class="line">total 12</div><div class="line">-rw-r--r-- 1 root root 616 Mar  9 15:20 Demo1.java</div><div class="line">-rw-r--r-- 1 root root 828 Mar  9 15:20 Outer1$1Inner.class</div><div class="line">-rw-r--r-- 1 root root 862 Mar  9 15:20 Outer1.class</div></pre></td></tr></table></figure></p><h4 id="匿名的内部类"><a href="#匿名的内部类" class="headerlink" title="匿名的内部类"></a>匿名的内部类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">interface Base &#123; void showValue(String f3); &#125;</div><div class="line"></div><div class="line">class Outer &#123;</div><div class="line">    private String o1 = &quot;o1&quot;;</div><div class="line">    private static String o2 = &quot;o2&quot;;</div><div class="line">    private final String o3 = &quot;o3&quot;;</div><div class="line"></div><div class="line">    Base getBase() &#123;</div><div class="line">        final String f1 = &quot;f1&quot;;</div><div class="line">        String f2 = &quot;f2&quot;;</div><div class="line"></div><div class="line">        return new Base() &#123;</div><div class="line">            @Override</div><div class="line">            public void showValue(String f3) &#123;</div><div class="line">                System.out.println(o1);</div><div class="line">                System.out.println(o2);</div><div class="line">                System.out.println(o3);</div><div class="line">                System.out.println(f1);</div><div class="line">                System.out.println(f3);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编译后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ll</div><div class="line">total 20</div><div class="line">-rw-r--r-- 1 root root 158 Mar  9 16:10 Base.class</div><div class="line">-rw-r--r-- 1 root root 497 Mar  9 16:10 Demo.class</div><div class="line">-rw-r--r-- 1 root root 901 Mar  9 15:02 Demo.java</div><div class="line">-rw-r--r-- 1 root root 885 Mar  9 16:10 Outer$1.class</div><div class="line">-rw-r--r-- 1 root root 820 Mar  9 16:10 Outer.class</div></pre></td></tr></table></figure></p><hr><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><p><u><strong>1. 为什么局部内部类和匿名内部类只能访问final类型的局部变量？</strong></u></p><ul><li>方法中定义的局部变量的生命周期会随着方法调用结束而结束，而定义在方法或作用域中的局部内部类<br>或匿名内部类的对象的生命周期可能还没结束，那么在局部内部类或匿名内部类继续访问方法的局部变量，<br>就变得不可能。</li><li>局部变量声明为final类型，在编译期间值就会得到确定，并直接在局部内部类或匿名内部类中创建一个拷贝</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://stackoverflow.com/questions/4732544/why-are-only-final-variables-accessible-in-anonymous-class" target="_blank" rel="external">Why-are-only-final-variables-accessible-in-anonymous-class</a><br><a href="http://stackoverflow.com/questions/1299837/cannot-refer-to-a-non-final-variable-inside-an-inner-class-defined-in-a-differen" target="_blank" rel="external">Cannot-refer-to-a-non-final-variable-inside-an-inner-class-defined-in-a-different-method</a><br><a href="http://blog.csdn.net/zhaoyw2008/article/details/9565219" target="_blank" rel="external">为什么匿名内部类和局部内部类只能访问final变量</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;内部类的访问控制符可以使用public、protected、private，而外部类只能使用public和默认&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;成员内部类与静态内部类&quot;&gt;&lt;a href=&quot;#成员内部类与静态内部类&quot; class=&quot;headerlink&quot; title=&quot;成员内部类与静态内部类&quot;&gt;&lt;/a&gt;成员内部类与静态内部类&lt;/h3&gt;&lt;p&gt;直接定义在外部类内部（不在方法或代码块内部），它可以直接访问外部类的所有成员变量和方法（包括private）。它可以有各种修饰符，包括：public、protected、private、static、final和abstract，也可以是默认；&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://ouyangyewei.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ouyangyewei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 抽象类与接口</title>
    <link href="http://ouyangyewei.github.io/2017/02/05/java-abstract-and-interface/"/>
    <id>http://ouyangyewei.github.io/2017/02/05/java-abstract-and-interface/</id>
    <published>2017-02-04T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>用于捕捉子类的共有特性，它不能被实例化，只能用作子类的超类。抽象类是被用来创建继承层级里子类的模板。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractClass</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// do sth</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">af1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">af2</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">af3</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// ! abstract方法只能是非private的</span></div><div class="line">    <span class="comment">// private abstract void af4();</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">f3</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">f4</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><hr><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>是抽象方法的集合。只能被实现，本身不能做任何事情。若一个类实现了某个接口，则它就继承了这个接口的所有抽象方法。以JDK中的CharSequence.java为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CharSequence</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">CharSequence <span class="title">subSequence</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="接口的特性"><a href="#接口的特性" class="headerlink" title="接口的特性"></a>接口的特性</h4><ul><li>接口定义中的所有方法，都是public，隐式的abstract方法</li><li>接口定义中的域，都隐式是public static final</li><li>接口可嵌套在类和其它接口中</li></ul><h4 id="使用接口的核心原因"><a href="#使用接口的核心原因" class="headerlink" title="使用接口的核心原因"></a>使用接口的核心原因</h4><ul><li>能向上转型为多个基类型</li><li>防止创建基类的对象</li></ul><h3 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h3><table><thead><tr><th style="text-align:left">项</th><th style="text-align:left">抽象类</th><th style="text-align:left">接口</th></tr></thead><tbody><tr><td style="text-align:left">构造器</td><td style="text-align:left">可以有</td><td style="text-align:left">×</td></tr><tr><td style="text-align:left">实例化</td><td style="text-align:left">×</td><td style="text-align:left">×</td></tr><tr><td style="text-align:left">属性</td><td style="text-align:left">可以有。public，protected，default和private均可</td><td style="text-align:left">可以有。只能是public static final</td></tr><tr><td style="text-align:left">方法</td><td style="text-align:left">有private方法，非abstract方法可以实现</td><td style="text-align:left">均是public，隐式的abstract方法</td></tr><tr><td style="text-align:left">设计理念</td><td style="text-align:left">is-a关系（继承）</td><td style="text-align:left">like-a关系（组合）</td></tr><tr><td style="text-align:left">main方法</td><td style="text-align:left">可以有，能运行</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">添加新方法</td><td style="text-align:left">往抽象类添加新方法，可以提供默认实现，不需要改动现有代码</td><td style="text-align:left">往接口添加新方法，必须改变实现该接口的类</td></tr></tbody></table><h3 id="何时使用抽象类和接口"><a href="#何时使用抽象类和接口" class="headerlink" title="何时使用抽象类和接口"></a>何时使用抽象类和接口</h3><ul><li>如果你拥有一些方法并希望它们中的一些有默认实现，则使用抽象类</li><li>如果你想实现多重继承，那么必须使用接口。因为Java不支持多重继承，子类不能继承多个类，但能实现多个接口</li><li>如果基础功能不断改变，那么就需要使用抽象类。如果不断改变基础功能并使用接口，那么你就需要改变实现该接口的所有子类</li></ul><hr><h3 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h3><p><a href="http://www.importnew.com/12399.html" target="_blank" rel="external">Java抽象类与接口的区别</a><br><a href="http://blog.csdn.net/ooppookid/article/details/51173179" target="_blank" rel="external">接口和抽象类有什么区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;抽象类&quot;&gt;&lt;a href=&quot;#抽象类&quot; class=&quot;headerlink&quot; title=&quot;抽象类&quot;&gt;&lt;/a&gt;抽象类&lt;/h3&gt;&lt;p&gt;用于捕捉子类的共有特性，它不能被实例化，只能用作子类的超类。抽象类是被用来创建继承层级里子类的模板。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractClass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// do sth&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;af1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;af2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;af3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ! abstract方法只能是非private的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// private abstract void af4();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f4&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://ouyangyewei.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ouyangyewei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java final与private关键字</title>
    <link href="http://ouyangyewei.github.io/2017/01/28/java-final-and-private/"/>
    <id>http://ouyangyewei.github.io/2017/01/28/java-final-and-private/</id>
    <published>2017-01-27T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><ul><li>对于基本类型，final使其数值恒定不变</li><li>对于对象引用，final使其引用恒定不变（一旦引用被初始化指向一个对象，就无法再把它指向另一个对象，然而，对象其自身是可以修改的）</li></ul><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    Value(<span class="keyword">int</span> i) &#123;</div><div class="line">        <span class="keyword">this</span>.i = i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFinal</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Value v1 = <span class="keyword">new</span> Value(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        v1.i++;</div><div class="line">        System.out.println(v1.i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* Output:</span></div><div class="line"><span class="comment">2</span></div><div class="line"><span class="comment">*/</span><span class="comment">//:~</span></div></pre></td></tr></table></figure><blockquote><p>引用<code>v1</code>在初始化时已经指向对象<code>new Value(1)</code>，就无法再指向其它对象，然而对象本身是可以改变的，它修改了成员变量<code>i</code></p></blockquote><h3 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h3><ul><li>不能被继承</li><li>成员变量并不隐式为final</li><li>所有方法都隐式指定为final，因此无法覆盖</li></ul><h3 id="final与private关键字"><a href="#final与private关键字" class="headerlink" title="final与private关键字"></a>final与private关键字</h3><ul><li>final方法：子类不可重写，只能调用</li><li>private方法：本身是final方法，但是不能被子类继承，不能被子类重写，不能被子类调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Derived.func"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="comment">// 若方法改成非private，则会被子类同名方法覆盖</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Base.func"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Base obj = <span class="keyword">new</span> Derived();</div><div class="line"></div><div class="line">        <span class="comment">// 由于private被自动认为是final方法，在子类不能被覆盖</span></div><div class="line">        obj.func();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">Base.func</span></div><div class="line"><span class="comment">*/</span><span class="comment">//:~</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;final关键字&quot;&gt;&lt;a href=&quot;#final关键字&quot; class=&quot;headerlink&quot; title=&quot;final关键字&quot;&gt;&lt;/a&gt;final关键字&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对于基本类型，final使其数值恒定不变&lt;/li&gt;
&lt;li&gt;对于对象引用，final使其引用恒定不变（一旦引用被初始化指向一个对象，就无法再把它指向另一个对象，然而，对象其自身是可以修改的）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://ouyangyewei.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ouyangyewei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java static与构造器顺序</title>
    <link href="http://ouyangyewei.github.io/2017/01/21/java-static/"/>
    <id>http://ouyangyewei.github.io/2017/01/21/java-static/</id>
    <published>2017-01-20T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="static与构造器顺序"><a href="#static与构造器顺序" class="headerlink" title="static与构造器顺序"></a><code>static</code>与构造器顺序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    A(<span class="keyword">int</span> n) &#123;</div><div class="line">        System.out.println(<span class="string">"A("</span> + n + <span class="string">")"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">    B(<span class="keyword">int</span> n) &#123;</div><div class="line">        System.out.println(<span class="string">"B("</span> + n + <span class="string">")"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStatic</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> A a1 = <span class="keyword">new</span> A(<span class="number">1</span>);</div><div class="line">    B b1 = <span class="keyword">new</span> B(<span class="number">1</span>);</div><div class="line">    <span class="keyword">static</span> A a2 = <span class="keyword">new</span> A(<span class="number">2</span>);</div><div class="line">    B b2 = <span class="keyword">new</span> B(<span class="number">2</span>);</div><div class="line">    A a3;</div><div class="line">    A a4;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.out.println(<span class="string">"Inside static block."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    TestStatic() &#123;</div><div class="line">        System.out.println(<span class="string">"Inside Constructor."</span>);</div><div class="line">        a3 = <span class="keyword">new</span> A(<span class="number">3</span>);</div><div class="line">        a4 = <span class="keyword">new</span> A(<span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Creating TestStatic"</span>);</div><div class="line">        <span class="keyword">new</span> TestStatic();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> A a5 = <span class="keyword">new</span> A(<span class="number">5</span>);</div><div class="line">    <span class="keyword">static</span> A a6 = <span class="keyword">new</span> A(<span class="number">6</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/* Output:</span></div><div class="line"><span class="comment">A(1)</span></div><div class="line"><span class="comment">A(2)</span></div><div class="line"><span class="comment">Inside static block.</span></div><div class="line"><span class="comment">A(5)</span></div><div class="line"><span class="comment">A(6)</span></div><div class="line"><span class="comment">Creating TestStatic</span></div><div class="line"><span class="comment">B(1)</span></div><div class="line"><span class="comment">B(2)</span></div><div class="line"><span class="comment">Inside Constructor.</span></div><div class="line"><span class="comment">A(3)</span></div><div class="line"><span class="comment">A(4)</span></div><div class="line"><span class="comment">*/</span><span class="comment">//:~</span></div></pre></td></tr></table></figure><p>从上面的程序中，可以发现：</p><blockquote><p>初始化的顺序是先<em>静态对象</em>，然后是<em>“非静态”对象</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;static与构造器顺序&quot;&gt;&lt;a href=&quot;#static与构造器顺序&quot; class=&quot;headerlink&quot; title=&quot;static与构造器顺序&quot;&gt;&lt;/a&gt;&lt;code&gt;static&lt;/code&gt;与构造器顺序&lt;/h3&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="java" scheme="http://ouyangyewei.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ouyangyewei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 修饰符访问权限</title>
    <link href="http://ouyangyewei.github.io/2017/01/08/java-access-modifier/"/>
    <id>http://ouyangyewei.github.io/2017/01/08/java-access-modifier/</id>
    <published>2017-01-07T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修饰符访问权限列表"><a href="#修饰符访问权限列表" class="headerlink" title="修饰符访问权限列表"></a>修饰符访问权限列表</h3><table><thead><tr><th style="text-align:left">修饰符</th><th style="text-align:left">当前类</th><th style="text-align:left">同一包内</th><th style="text-align:left">子孙类</th><th style="text-align:left">其他包</th></tr></thead><tbody><tr><td style="text-align:left">public</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td></tr><tr><td style="text-align:left">protected</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">×</td></tr><tr><td style="text-align:left">default</td><td style="text-align:left">√</td><td style="text-align:left">√</td><td style="text-align:left">×</td><td style="text-align:left">×</td></tr><tr><td style="text-align:left">private</td><td style="text-align:left">√</td><td style="text-align:left">×</td><td style="text-align:left">×</td><td style="text-align:left">×</td></tr></tbody></table><p>参考:<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html" target="_blank" rel="external">https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;修饰符访问权限列表&quot;&gt;&lt;a href=&quot;#修饰符访问权限列表&quot; class=&quot;headerlink&quot; title=&quot;修饰符访问权限列表&quot;&gt;&lt;/a&gt;修饰符访问权限列表&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:le
      
    
    </summary>
    
      <category term="java" scheme="http://ouyangyewei.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ouyangyewei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 循环与值拷贝</title>
    <link href="http://ouyangyewei.github.io/2017/01/07/java-foreach/"/>
    <id>http://ouyangyewei.github.io/2017/01/07/java-foreach/</id>
    <published>2017-01-06T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Foreach与值拷贝"><a href="#Foreach与值拷贝" class="headerlink" title="Foreach与值拷贝"></a><code>Foreach</code>与值拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span>[] array = <span class="string">"boss"</span>.toCharArray();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : array) &#123;</div><div class="line">    <span class="keyword">if</span> (c == <span class="string">'o'</span>) &#123;</div><div class="line">        c = <span class="string">'a'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">System.out.println(array);</div><div class="line"></div><div class="line"><span class="comment">/* Output:</span></div><div class="line"><span class="comment">boss</span></div><div class="line"><span class="comment">*/</span><span class="comment">//:~</span></div></pre></td></tr></table></figure><a id="more"></a><p>从字节码角度来分析<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</div><div class="line">    Code:</div><div class="line">       0: ldc           #2      // 将字符串常量boss，从常量池推送至栈顶</div><div class="line">       2: invokevirtual #3      // 调用实例方法：java/lang/String.toCharArray()</div><div class="line">       <span class="number">5</span>: astore_1              <span class="comment">//</span></div><div class="line">       <span class="number">6</span>: aload_1               <span class="comment">//</span></div><div class="line">       <span class="number">7</span>: astore_2              <span class="comment">// 赋值："boss" -&gt; array</span></div><div class="line">       <span class="number">8</span>: aload_2               <span class="comment">// 将 array 压入栈顶</span></div><div class="line">       <span class="number">9</span>: arraylength           <span class="comment">// 计算数组长度，并压入栈顶</span></div><div class="line">      <span class="number">10</span>: istore_3              <span class="comment">// 赋值：0 -&gt; arrayLength</span></div><div class="line">      <span class="number">11</span>: iconst_0              <span class="comment">// 将 0 压入栈顶</span></div><div class="line">      <span class="number">12</span>: istore        <span class="number">4</span>       <span class="comment">// 赋值：0 -&gt; i</span></div><div class="line">      <span class="number">14</span>: iload         <span class="number">4</span>       <span class="comment">// 将 i 压入栈顶</span></div><div class="line">      <span class="number">16</span>: iload_3               <span class="comment">// 将 arrayLength 压入栈顶</span></div><div class="line">      <span class="number">17</span>: if_icmpge     <span class="number">43</span>      <span class="comment">// 比较 i &lt; arrayLength</span></div><div class="line">      <span class="number">20</span>: aload_2               <span class="comment">// 将 array 压入栈</span></div><div class="line">      <span class="number">21</span>: iload         <span class="number">4</span>       <span class="comment">// 将 i 压入栈</span></div><div class="line">      <span class="number">23</span>: caload                <span class="comment">// 将 array[i] 压入栈顶，实际上压入的是array[i]对应的ASCII值</span></div><div class="line">      <span class="number">24</span>: istore        <span class="number">5</span>       <span class="comment">// 赋值：array[i]的ASCII值 -&gt; c</span></div><div class="line">      <span class="number">26</span>: iload         <span class="number">5</span>       <span class="comment">// 将 c 压入栈顶</span></div><div class="line">      <span class="number">28</span>: bipush        <span class="number">111</span>     <span class="comment">// 将字符o对应的ASCII值压入栈顶</span></div><div class="line">      <span class="number">30</span>: if_icmpne     <span class="number">37</span>      <span class="comment">// 比较 c == 'o'</span></div><div class="line">      <span class="number">33</span>: bipush        <span class="number">97</span>      <span class="comment">// 将字符a的ASCII值压入栈顶</span></div><div class="line">      <span class="number">35</span>: istore        <span class="number">5</span>       <span class="comment">// 赋值：'a' -&gt; c</span></div><div class="line">      <span class="number">37</span>: iinc          <span class="number">4</span>, <span class="number">1</span>    <span class="comment">// 自增：++i</span></div><div class="line">      <span class="number">40</span>: goto          <span class="number">14</span></div><div class="line">      <span class="number">43</span>: <span class="keyword">return</span></div></pre></td></tr></table></figure></p><p>可见，foreach的内部实现，也是增加了临时变量i和arrayLength，而其中的c只是局部变量（栈空间，使用完即不存在），取的array[i]只是值拷贝，并非引用，因此，实际上程序等同于如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span>[] array = <span class="string">"boss"</span>.toCharArray();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.length; ++i) &#123;</div><div class="line">    <span class="keyword">char</span> c = array[i];</div><div class="line">    <span class="keyword">if</span> (c == <span class="string">'o'</span>) &#123;</div><div class="line">        c = <span class="string">'a'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">System.out.println(array);</div><div class="line"></div><div class="line"><span class="comment">/* Output:</span></div><div class="line"><span class="comment">boss</span></div><div class="line"><span class="comment">*/</span><span class="comment">//:~</span></div></pre></td></tr></table></figure></p><p>在这里，变量<code>c</code>只是迭代器的局部变量，是对<code>array</code>的值拷贝，并非引用，因此改变值并不会改变数组</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Foreach与值拷贝&quot;&gt;&lt;a href=&quot;#Foreach与值拷贝&quot; class=&quot;headerlink&quot; title=&quot;Foreach与值拷贝&quot;&gt;&lt;/a&gt;&lt;code&gt;Foreach&lt;/code&gt;与值拷贝&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] array = &lt;span class=&quot;string&quot;&gt;&quot;boss&quot;&lt;/span&gt;.toCharArray();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c : array) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;string&quot;&gt;&#39;o&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        c = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(array);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Output:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;boss&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//:~&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://ouyangyewei.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ouyangyewei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>killtask命令</title>
    <link href="http://ouyangyewei.github.io/2016/04/27/linux-killtask-command/"/>
    <id>http://ouyangyewei.github.io/2016/04/27/linux-killtask-command/</id>
    <published>2016-04-26T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h1><p>方便杀死指定名称的linux进程</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>1.下载 <a href="https://github.com/ouyangyewei/Toolkit/tree/master/linux/killtask" target="_blank" rel="external">killtask</a> 命令到本地服务器<br>2.编辑<code>/etc/profile</code>或<code>~/.bashrc</code>文件，加入如下代码行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> killtask=<span class="string">'sh your_linux_path/killtask'</span></div></pre></td></tr></table></figure></p><p>3.使用命令<code>source /etc/profile</code>或<code>source ~/.bashrc</code>，使脚本立即生效</p><h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><p><img src="http://ol3q0aw97.bkt.clouddn.com/blog/linux-killtask-command/killtask_sample.gif" alt="killtask_demo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;功能介绍&quot;&gt;&lt;a href=&quot;#功能介绍&quot; class=&quot;headerlink&quot; title=&quot;功能介绍&quot;&gt;&lt;/a&gt;功能介绍&lt;/h1&gt;&lt;p&gt;方便杀死指定名称的linux进程&lt;/p&gt;
&lt;h1 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="linux" scheme="http://ouyangyewei.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://ouyangyewei.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://ouyangyewei.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>linux与hdfs历史文件清理脚本</title>
    <link href="http://ouyangyewei.github.io/2016/04/18/linux-clear-trash/"/>
    <id>http://ouyangyewei.github.io/2016/04/18/linux-clear-trash/</id>
    <published>2016-04-17T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h1><ul><li>清理指定天数前的linux文件（支持指定清理文件夹、豁免清理文件夹）</li><li>清理指定天数前的hdfs文件</li></ul><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><h3 id="加入killtask命令"><a href="#加入killtask命令" class="headerlink" title="加入killtask命令"></a>加入killtask命令</h3><p>1.下载 <a href="https://github.com/ouyangyewei/Toolkit/tree/master/linux/killtask" target="_blank" rel="external">killtask</a> 命令到本地服务器<br>2.编辑<code>/etc/profile</code>或<code>~/.bashrc</code>文件，加入如下代码行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> killtask=<span class="string">'sh your_linux_path/killtask'</span></div></pre></td></tr></table></figure></p><p>3.使用命令<code>source /etc/profile</code>或<code>source ~/.bashrc</code>，使脚本立即生效</p><a id="more"></a><h3 id="crontab设置clear-trash脚本"><a href="#crontab设置clear-trash脚本" class="headerlink" title="crontab设置clear_trash脚本"></a>crontab设置clear_trash脚本</h3><p>1.下载 <a href="https://github.com/ouyangyewei/Toolkit/blob/master/linux/clear_trash/clear_trash.sh" target="_blank" rel="external">clear_trash</a> 脚本到本地服务器<br>2.加入crontab配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* */6 * * * (sh /your_linux_path/killtask clear_trash &gt; /dev/null; sh /your_linux_path/clear_trash.sh &gt;&gt; /your_linux_path/xxx.log 2&gt;&amp;1 &amp;)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;功能介绍&quot;&gt;&lt;a href=&quot;#功能介绍&quot; class=&quot;headerlink&quot; title=&quot;功能介绍&quot;&gt;&lt;/a&gt;功能介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;清理指定天数前的linux文件（支持指定清理文件夹、豁免清理文件夹）&lt;/li&gt;
&lt;li&gt;清理指定天数前的hdfs文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h1&gt;&lt;h3 id=&quot;加入killtask命令&quot;&gt;&lt;a href=&quot;#加入killtask命令&quot; class=&quot;headerlink&quot; title=&quot;加入killtask命令&quot;&gt;&lt;/a&gt;加入killtask命令&lt;/h3&gt;&lt;p&gt;1.下载 &lt;a href=&quot;https://github.com/ouyangyewei/Toolkit/tree/master/linux/killtask&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;killtask&lt;/a&gt; 命令到本地服务器&lt;br&gt;2.编辑&lt;code&gt;/etc/profile&lt;/code&gt;或&lt;code&gt;~/.bashrc&lt;/code&gt;文件，加入如下代码行&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt; killtask=&lt;span class=&quot;string&quot;&gt;&#39;sh your_linux_path/killtask&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.使用命令&lt;code&gt;source /etc/profile&lt;/code&gt;或&lt;code&gt;source ~/.bashrc&lt;/code&gt;，使脚本立即生效&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://ouyangyewei.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://ouyangyewei.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://ouyangyewei.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell多进程并发控制</title>
    <link href="http://ouyangyewei.github.io/2016/01/10/linux-multi-process-concurrent-control/"/>
    <id>http://ouyangyewei.github.io/2016/01/10/linux-multi-process-concurrent-control/</id>
    <published>2016-01-09T16:00:00.000Z</published>
    <updated>2017-09-25T13:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识准备"><a href="#基础知识准备" class="headerlink" title="基础知识准备"></a>基础知识准备</h1><h2 id="linux后台进程"><a href="#linux后台进程" class="headerlink" title="linux后台进程"></a>linux后台进程</h2><p>Unix是一个多任务系统，允许多用户同时运行多个程序。shell的元字符<code>&amp;</code>提供了在后台运行不需要键盘输入的程序的方法。输入命令后，其后紧跟<code>&amp;</code>字符，该命令就会被送往到linux后台执行，而终端又可以继续输入下一个命令了。</p><p>比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sh a.sh &amp;</div><div class="line">sh b.sh &amp;</div><div class="line">sh c.sh &amp;</div></pre></td></tr></table></figure></p><p>这三个命令就会被<strong>同时</strong>送往linux后台执行，在这个程度上，认为这三个命令<strong>并发执行</strong>了。</p><a id="more"></a><h2 id="linux文件描述符"><a href="#linux文件描述符" class="headerlink" title="linux文件描述符"></a>linux文件描述符</h2><p>文件描述符（缩写fd）在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。每一个unix进程，都会拥有三个标准的文件描述符，来对应三种不同的流：</p><table><thead><tr><th style="text-align:left">文件描述符</th><th style="text-align:left">名称</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">Standard Input</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">Standard Output</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Standard Error</td></tr></tbody></table><p>每一个文件描述符会对应一个打开文件，同时，不同的文件描述符也可以对应同一个打开文件；同一个文件可以被不同的进程打开，也可以被同一个进程多次打开。</p><p>在<code>/proc/PID/fd</code>中，列举了进程<code>PID</code>所拥有的文件描述符，例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">source</span> /etc/profile;</div><div class="line"></div><div class="line"><span class="comment"># $$表示当前进程的PID</span></div><div class="line">PID=$$</div><div class="line"></div><div class="line"><span class="comment"># 查看当前进程的文件描述符指向</span></div><div class="line">ll /proc/<span class="variable">$PID</span>/fd</div><div class="line"><span class="built_in">echo</span> <span class="string">"-------------------"</span>;<span class="built_in">echo</span></div><div class="line"></div><div class="line"><span class="comment"># 文件描述符1与文件tempfd1进行绑定</span></div><div class="line">( [ -e ./tempfd1 ] || touch ./tempfd1 ) &amp;&amp; <span class="built_in">exec</span> 1&lt;&gt;./tempfd1</div><div class="line"></div><div class="line"><span class="comment"># 查看当前进程的文件描述符指向</span></div><div class="line">ll /proc/<span class="variable">$PID</span>/fd</div><div class="line"><span class="built_in">echo</span> <span class="string">"-------------------"</span>;<span class="built_in">echo</span>;</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[ouyangyewei@localhost learn_linux]$ sh learn_redirect.sh</div><div class="line">total 0</div><div class="line">lrwx------. 1 ouyangyewei ouyangyewei 64 Jan  4 22:17 0 -&gt; /dev/pts/0</div><div class="line">lrwx------. 1 ouyangyewei ouyangyewei 64 Jan  4 22:17 1 -&gt; /dev/pts/0</div><div class="line">lrwx------. 1 ouyangyewei ouyangyewei 64 Jan  4 22:17 2 -&gt; /dev/pts/0</div><div class="line">lr-x------. 1 ouyangyewei ouyangyewei 64 Jan  4 22:17 255 -&gt; /home/ouyangyewei/workspace/learn_linux/learn_redirect.sh</div><div class="line">-------------------</div><div class="line"></div><div class="line">[ouyangyewei@localhost learn_linux]$ cat tempfd1</div><div class="line">total 0</div><div class="line">lrwx------. 1 ouyangyewei ouyangyewei 64 Jan  4 22:17 0 -&gt; /dev/pts/0</div><div class="line">lrwx------. 1 ouyangyewei ouyangyewei 64 Jan  4 22:17 1 -&gt; /home/ouyangyewei/workspace/learn_linux/tempfd1</div><div class="line">lrwx------. 1 ouyangyewei ouyangyewei 64 Jan  4 22:17 2 -&gt; /dev/pts/0</div><div class="line">lr-x------. 1 ouyangyewei ouyangyewei 64 Jan  4 22:17 255 -&gt; /home/ouyangyewei/workspace/learn_linux/learn_redirect.sh</div><div class="line">-------------------</div></pre></td></tr></table></figure><p>上述的例子中第12行，将文件描述符1与文件<code>tempfile</code>进行了绑定，此后，文件描述符1指向了<code>tempfile</code>文件，标准输出被重定向到了文件<code>tempfile</code>中。</p><h2 id="linux管道"><a href="#linux管道" class="headerlink" title="linux管道"></a>linux管道</h2><p>在Unix或类Unix操作系统中，管道是一个由标准输入输出链接起来的进程集合，因此，每一个进程的输出将直接作为下一个进程的输入，</p><p>linux管道包含两种：</p><ul><li>匿名管道</li><li>命名管道</li></ul><p><strong><em>管道有一个特点，如果管道中没有数据，那么取管道数据的操作就会滞留，直到管道内进入数据，然后读出后才会终止这一操作；同理，写入管道的操作如果没有读取管道的操作，这一动作就会滞留。</em></strong></p><h3 id="匿名管道"><a href="#匿名管道" class="headerlink" title="匿名管道"></a>匿名管道</h3><p>在Unix或类Unix操作系统的命令行中，匿名管道使用ASCII中垂直线<code>|</code>作为匿名管道符，匿名管道的两端是两个普通的，匿名的，打开的文件描述符：一个<strong>只读端</strong>和一个<strong>只写端</strong>，这就让其它进程无法连接到该匿名管道。</p><p>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat file | less</div></pre></td></tr></table></figure></p><p>为了执行上面的指令，Shell创建了两个进程来分别执行<code>cat</code>和<code>less</code>。下图展示了这两个进程是如何使用管道的：<br><img src="http://ol3q0aw97.bkt.clouddn.com/blog/linux-multi-process-concurrent-control/linux-unnamed-pipe.png" alt="linux匿名管道"><br>有一点值得注意的是两个进程都连接到了管道上，这样写入进程<code>cat</code>就将其标准输出（文件描述符为<code>fd 1</code>）连接到了管道的写入端，读取进程<code>less</code>就将其标准输入（文件描述符为<code>fd 0</code>）连接到了管道的读入端。实际上，这两个进程并不知道管道的存在，它们只是从标准文件描述符中读取数据和写入数据。shell必须要完成相关的工作。</p><h3 id="命名管道（FIFO，First-In-First-Out）"><a href="#命名管道（FIFO，First-In-First-Out）" class="headerlink" title="命名管道（FIFO，First In First Out）"></a>命名管道（FIFO，First In First Out）</h3><p>命名管道也称FIFO，从语义上来讲，FIFO其实与匿名管道类似，但值得注意：</p><ul><li>在文件系统中，FIFO拥有名称，并且是以设备特俗文件的形式存在的；</li><li>任何进程都可以通过FIFO共享数据；</li><li>除非FIFO两端同时有读与写的进程，否则FIFO的数据流通将会阻塞；</li><li>匿名管道是由shell自动创建的，存在于内核中；而FIFO则是由程序创建的（比如<code>mkfifo</code>命令），存在于文件系统中；</li><li>匿名管道是单向的字节流，而FIFO则是双向的字节流；</li></ul><p>比如，可以利用FIFO实现单服务器、多客户端的应用程序:<br><img src="http://ol3q0aw97.bkt.clouddn.com/blog/linux-multi-process-concurrent-control/linux-named-pipe.png" alt="linux命名管道"></p><hr><p>有了上面的知识准备，现在可以开始讲述，<strong>linux多进程并发时，如何控制每次并发的进程数。</strong></p><h1 id="linux多进程并发数控制"><a href="#linux多进程并发数控制" class="headerlink" title="linux多进程并发数控制"></a>linux多进程并发数控制</h1><p>最近小A需要生产2015年全年的KPI数据报表，现在小A已经将生产脚本写好了，生产脚本一次只能生产指定一天的KPI数据，假设跑一次生产脚本需要5分钟，那么：</p><ul><li>如果是循环顺序执行，那么需要时间：5 * 365 = 1825 分钟，约等于 6 天</li><li>如果是一次性放到linux后台并发执行，365个后台任务，系统可承受不住哦！</li></ul><p>既然不能一次性把365个任务放到linux后台执行，那么，能不能实现自动地每次将N个任务放到后台并发执行呢？当然是可以的啦。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"><span class="built_in">source</span> /etc/profile;</div><div class="line"></div><div class="line"><span class="comment"># -----------------------------</span></div><div class="line"></div><div class="line">tempfifo=$$.fifo        <span class="comment"># $$表示当前执行文件的PID</span></div><div class="line">begin_date=<span class="variable">$1</span>           <span class="comment"># 开始时间</span></div><div class="line">end_date=<span class="variable">$2</span>             <span class="comment"># 结束时间</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 2 ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$begin_date</span>"</span> \&gt; <span class="string">"<span class="variable">$end_date</span>"</span> ]</div><div class="line">    <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"Error! <span class="variable">$begin_date</span> is greater than <span class="variable">$end_date</span>"</span></div><div class="line">        <span class="built_in">exit</span> 1;</div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Error! Not enough params."</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Sample: sh loop_kpi 2015-12-01 2015-12-07"</span></div><div class="line">    <span class="built_in">exit</span> 2;</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># -----------------------------</span></div><div class="line"></div><div class="line"><span class="built_in">trap</span> <span class="string">"exec 1000&gt;&amp;-;exec 1000&lt;&amp;-;exit 0"</span> 2</div><div class="line">mkfifo <span class="variable">$tempfifo</span></div><div class="line"><span class="built_in">exec</span> 1000&lt;&gt;<span class="variable">$tempfifo</span></div><div class="line">rm -rf <span class="variable">$tempfifo</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> ((i=1; i&lt;=8; i++))</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> &gt;&amp;1000</div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> [ <span class="variable">$begin_date</span> != <span class="variable">$end_date</span> ]</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">read</span> -u1000</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">echo</span> <span class="variable">$begin_date</span></div><div class="line">        hive -f kpi_report.sql --hivevar date=<span class="variable">$begin_date</span></div><div class="line">        <span class="built_in">echo</span> &gt;&amp;1000</div><div class="line">    &#125; &amp;</div><div class="line"></div><div class="line">    begin_date=`date -d <span class="string">"+1 day <span class="variable">$begin_date</span>"</span> +<span class="string">"%Y-%m-%d"</span>`</div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="built_in">wait</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"done!!!!!!!!!!"</span></div></pre></td></tr></table></figure><ul><li>第6～22行：比如：<code>sh loop_kpi_report.sh 2015-01-01 2015-12-01</code>：<ul><li><code>$1</code>表示脚本入参的第一个参数，等于2015-01-01</li><li><code>$2</code>表示脚本入参的第二个参数，等于2015-12-01</li><li><code>$#</code>表示脚本入参的个数，等于2  </li><li>第13行用于比较传入的两个日期的大小，<code>\&gt;</code>是转义</li></ul></li><li>第26行：表示在脚本运行过程中，如果接收到<code>Ctrl+C</code>中断命令，则关闭文件描述符1000的读写，并正常退出<ul><li><code>exec 1000&gt;&amp;-;</code>表示关闭文件描述符1000的写</li><li><code>exec 1000&lt;&amp;-;</code>表示关闭文件描述符1000的读</li><li>trap是捕获中断命令</li></ul></li><li>第27～29行：<ul><li>第27行，创建一个管道文件</li><li>第28行，将文件描述符1000与FIFO进行绑定，<code>&lt;</code>读的绑定，<code>&gt;</code>写的绑定，<code>&lt;&gt;</code>则标识对文件描述符1000的所有操作等同于对管道文件<code>$tempfifo</code>的操作</li><li>第29行，可能会有这样的疑问：为什么不直接使用管道文件呢？事实上这并非多此一举，管道的一个重要特性，就是读写必须同时存在，缺失某一个操作，另一个操作就是滞留，而第28行的绑定文件描述符（读、写绑定）正好解决了这个问题</li></ul></li><li>第31～34行：对文件描述符1000进行写入操作。通过循环写入8个空行，这个8就是我们要定义的后台并发的线程数。为什么是写空行而不是写其它字符？因为管道文件的读取，是以行为单位的</li><li>第37～42行：<ul><li>第37行，<code>read -u1000</code>的作用就是读取管道中的一行，在这里就是读取一个空行；每次读取管道就会减少一个空行</li><li>第39～41行，注意到第42行结尾的<code>&amp;</code>吗？它表示进程放到linux后台中执行</li><li>第41行，执行完后台任务之后，往文件描述符1000中写入一个空行。这是关键所在了，由于<code>read -u1000</code>每次操作，都会导致管道减少一个空行，当linux后台放入了8个任务之后，由于文件描述符1000没有可读取的空行，将导致<code>read -u1000</code>一直处于等待。</li></ul></li></ul><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>Unix Power Tools</li><li>UNIX系统编程手册</li><li>UNIX管道：<a href="https://zh.wikipedia.org/wiki/%E7%AE%A1%E9%81%93_(Unix)" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E7%AE%A1%E9%81%93_(Unix)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础知识准备&quot;&gt;&lt;a href=&quot;#基础知识准备&quot; class=&quot;headerlink&quot; title=&quot;基础知识准备&quot;&gt;&lt;/a&gt;基础知识准备&lt;/h1&gt;&lt;h2 id=&quot;linux后台进程&quot;&gt;&lt;a href=&quot;#linux后台进程&quot; class=&quot;headerlink&quot; title=&quot;linux后台进程&quot;&gt;&lt;/a&gt;linux后台进程&lt;/h2&gt;&lt;p&gt;Unix是一个多任务系统，允许多用户同时运行多个程序。shell的元字符&lt;code&gt;&amp;amp;&lt;/code&gt;提供了在后台运行不需要键盘输入的程序的方法。输入命令后，其后紧跟&lt;code&gt;&amp;amp;&lt;/code&gt;字符，该命令就会被送往到linux后台执行，而终端又可以继续输入下一个命令了。&lt;/p&gt;
&lt;p&gt;比如：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sh a.sh &amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sh b.sh &amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sh c.sh &amp;amp;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这三个命令就会被&lt;strong&gt;同时&lt;/strong&gt;送往linux后台执行，在这个程度上，认为这三个命令&lt;strong&gt;并发执行&lt;/strong&gt;了。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://ouyangyewei.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://ouyangyewei.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://ouyangyewei.github.io/tags/shell/"/>
    
  </entry>
  
</feed>
